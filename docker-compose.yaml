services:
  backend:
    image: cat-backend
    restart: unless-stopped
    ports:
      # HTTP API
      - 80:80
    env_file:
      - .env
  spider:
    image: cat-spider
    restart: no
    env_file:
      - .env
  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.30.0
    ports:
      # HTTP API
      - 8080:8080
      # gRPC
      - 50051:50051
      # Error????
      # - 11434:11434
    volumes:
    - /opt/catsearch/weaviate:/var/lib/weaviate
    restart: on-failure:0
    environment:
      # Image Vectorization
      IMAGE_INFERENCE_API: 'http://i2v-neural:8080'
      QUERY_DEFAULTS_LIMIT: 25
      # Where to store persistent data
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-ollama'
      # Ollama Integration
      OLLAMA_API_ENDPOINT: 'http://ollama:11434/api/embeddings'
      # ENABLE_MODULES
      #   text2vec-ollama:    for text embeddings using the Ollama LLM backend.
      #   img2vec-neural:     for image embeddings.
      #   generative-ollama:  for generative tasks (e.g., summarization, QA).
      ENABLE_MODULES: 'text2vec-ollama,img2vec-neural,generative-ollama'
      CLUSTER_HOSTNAME: 'node1'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      # Enables API key authentication.
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      # List one or more keys in plaintext separated by commas. Each key corresponds to a specific user identity below.
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: 'Hack_the_VK'
      # List one or more user identities, separated by commas. Each identity corresponds to a specific key above.
      AUTHENTICATION_APIKEY_USERS: 'admin'

  i2v-neural:
    image: cr.weaviate.io/semitechnologies/img2vec-keras:resnet50
    environment:
      ENABLE_CUDA: '0'
  ollama:
    image: ollama/ollama
    ports:
      - '11434:11434'
    volumes:
      - /opt/catsearch/ollama:/root/.ollama

  pg:
    image: "postgres:17"
#    container_name: pg
    restart: unless-stopped
    #env_file:
    #  - "vars.env"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: local
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      # external_directory:internal_directory
      # volume for postgresql data
      - "${PG_DATA:-/opt/catsearch/pg/pgdata}:/var/lib/postgresql/data/pgdata"
      # volume for .dump files
      #- "${PG_IMPORT_DATA:-/opt/catsearch/pg/import_data}:/opt/catsearch/import_data"
      - "${PG_IMPORT_DATA:-./import_data}:/opt/catsearch/import_data"
    ports:
      # "external_port:internal_port"
      - "5432:5432"
  
  mongo:
    image: "mongo:8.0"
#    container_name: mongo
    restart: unless-stopped
    #env_file:
    #  - "vars.env"
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: raw
    volumes:
      # external_directory:internal_directory
      # volume for mongo data
      - "/opt/catsearch/mongo/data:/data/db"
    ports:
      # "external_port:internal_port"
      - "27017:27017"
